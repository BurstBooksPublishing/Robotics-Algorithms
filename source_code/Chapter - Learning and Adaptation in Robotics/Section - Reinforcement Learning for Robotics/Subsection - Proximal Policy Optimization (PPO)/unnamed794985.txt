import torch
import torch.nn as nn
import torch.optim as optim
import numpy as np
from torch.distributions import MultivariateNormal

class PPONetwork(nn.Module):
    """Actor-Critic network for PPO."""
    def __init__(self, state_dim, action_dim, action_std):
        super(PPONetwork, self).__init__()
        # Shared feature extractor
        self.shared_layers = nn.Sequential(
            nn.Linear(state_dim, 64),
            nn.Tanh(),
            nn.Linear(64, 64),
            nn.Tanh()
        )
        # Actor (policy) head
        self.actor = nn.Linear(64, action_dim)
        # Critic (value) head
        self.critic = nn.Linear(64, 1)
        # Action variance
        self.action_var = torch.full((action_dim,), action_std * action_std)

    def forward(self, state):
        """Forward pass for both actor and critic."""
        shared_features = self.shared_layers(state)
        return self.actor(shared_features), self.critic(shared_features)

class PPO:
    """PPO implementation for robotics control."""
    def __init__(self, state_dim, action_dim, lr_actor, lr_critic, gamma, K_epochs, eps_clip, action_std=0.5):
        self.gamma = gamma
        self.eps_clip = eps_clip
        self.K_epochs = K_epochs
        
        self.policy = PPONetwork(state_dim, action_dim, action_std)
        self.optimizer = optim.Adam([
            {'params': self.policy.actor.parameters(), 'lr': lr_actor},
            {'params': self.policy.critic.parameters(), 'lr': lr_critic}
        ])
        self.policy_old = PPONetwork(state_dim, action_dim, action_std)
        self.policy_old.load_state_dict(self.policy.state_dict())
        
        self.MseLoss = nn.MSELoss()

    def select_action(self, state):
        """Select action using current policy."""
        state = torch.FloatTensor(state.reshape(1, -1))
        with torch.no_grad():
            action_mean, _ = self.policy_old(state)
        cov_mat = torch.diag(self.policy_old.action_var)
        dist = MultivariateNormal(action_mean, cov_mat)
        action = dist.sample()
        action_logprob = dist.log_prob(action)
        return action.detach().numpy().flatten(), action_logprob.detach()

    def update(self, memory):
        """Update policy using PPO clipping."""
        # Monte Carlo estimate of returns
        rewards = []
        discounted_reward = 0
        for reward, is_terminal in zip(reversed(memory.rewards), reversed(memory.is_terminals)):
            if is_terminal:
                discounted_reward = 0
            discounted_reward = reward + (self.gamma * discounted_reward)
            rewards.insert(0, discounted_reward)
        
        # Normalize rewards
        rewards = torch.tensor(rewards, dtype=torch.float32)
        rewards = (rewards - rewards.mean()) / (rewards.std() + 1e-7)
        
        # Convert to tensors
        old_states = torch.FloatTensor(np.array(memory.states))
        old_actions = torch.FloatTensor(np.array(memory.actions))
        old_logprobs = torch.FloatTensor(np.array(memory.logprobs))
        
        # Optimize policy for K epochs
        for _ in range(self.K_epochs):
            # Evaluate old actions and values
            action_means, state_values = self.policy(old_states)
            dist = MultivariateNormal(action_means, torch.diag(self.policy.action_var))
            logprobs = dist.log_prob(old_actions)
            dist_entropy = dist.entropy()
            
            # Importance ratio
            ratios = torch.exp(logprobs - old_logprobs.detach())
            
            # Advantage estimation
            advantages = rewards - state_values.detach()
            
            # Surrogate loss with clipping
            surr1 = ratios * advantages
            surr2 = torch.clamp(ratios, 1-self.eps_clip, 1+self.eps_clip) * advantages
            loss = -torch.min(surr1, surr2) + 0.5 * self.MseLoss(state_values, rewards) - 0.01 * dist_entropy
            
            # Gradient descent
            self.optimizer.zero_grad()
            loss.mean().backward()
            self.optimizer.step()
        
        # Update old policy
        self.policy_old.load_state_dict(self.policy.state_dict())

# Usage example (would be part of a larger robotics training loop)
# ppo = PPO(state_dim=8, action_dim=2, lr_actor=0.0003, lr_critic=0.001, 
#           gamma=0.99, K_epochs=80, eps_clip=0.2)