# Supervised and Unsupervised Learning in Robotics
# Robotics Algorithms - Chapter 7: Learning and Adaptation in Robotics

import numpy as np
from sklearn.svm import SVC
from sklearn.cluster import KMeans
from sklearn.datasets import make_classification, make_blobs
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, silhouette_score

# Supervised Learning: SVM for robotic object classification
def supervised_learning_example():
    # Generate synthetic dataset for object classification
    X, y = make_classification(n_samples=1000, n_features=20, n_classes=3, random_state=42)
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    
    # Initialize and train SVM classifier
    svm = SVC(kernel='rbf', C=1.0, gamma='scale')
    svm.fit(X_train, y_train)
    
    # Evaluate performance
    y_pred = svm.predict(X_test)
    accuracy = accuracy_score(y_test, y_pred)
    print(f"SVM Classification Accuracy: {accuracy:.2f}")

# Unsupervised Learning: K-Means for robotic environment clustering
def unsupervised_learning_example():
    # Generate synthetic environment data (sensor readings)
    X, _ = make_blobs(n_samples=500, n_features=10, centers=4, cluster_std=1.5, random_state=42)
    
    # Cluster using K-Means
    kmeans = KMeans(n_clusters=4, random_state=42)
    clusters = kmeans.fit_predict(X)
    
    # Evaluate clustering quality
    silhouette = silhouette_score(X, clusters)
    print(f"K-Means Silhouette Score: {silhouette:.2f}")

if __name__ == "__main__":
    print("Supervised Learning Example:")
    supervised_learning_example()
    
    print("\nUnsupervised Learning Example:")
    unsupervised_learning_example()