import numpy as np
import open3d as o3d
from sklearn.cluster import DBSCAN

def process_point_cloud(point_cloud_data):
    """
    Process a 3D point cloud for robotics perception tasks.
    Args:
        point_cloud_data: Nx3 numpy array of XYZ coordinates
    Returns:
        clustered_objects: List of segmented point clouds
    """
    # Convert numpy array to Open3D point cloud
    pcd = o3d.geometry.PointCloud()
    pcd.points = o3d.utility.Vector3dVector(point_cloud_data)

    # Remove statistical outliers (noise reduction)
    cl, _ = pcd.remove_statistical_outlier(nb_neighbors=20, std_ratio=2.0)
    
    # Voxel downsampling for efficiency
    downsampled = cl.voxel_down_sample(voxel_size=0.05)

    # Clustering using DBSCAN for object segmentation
    points = np.asarray(downsampled.points)
    clustering = DBSCAN(eps=0.1, min_samples=10).fit(points)
    labels = clustering.labels_

    # Extract individual clusters
    clustered_objects = []
    max_label = labels.max()
    for label in range(0, max_label + 1):
        cluster_indices = np.where(labels == label)[0]
        cluster = downsampled.select_by_index(cluster_indices)
        if len(cluster.points) > 50:  # Filter small clusters
            clustered_objects.append(cluster)

    return clustered_objects

# Example usage
if __name__ == "__main__":
    # Simulate LIDAR point cloud (in practice, load from sensor data)
    synthetic_data = np.random.rand(1000, 3) * 10  # 1000 points in 10m cube
    objects = process_point_cloud(synthetic_data)
    
    # Visualization (optional)
    o3d.visualization.draw_geometries(objects)