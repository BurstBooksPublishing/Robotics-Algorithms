import cv2
import numpy as np

def compute_optical_flow(prev_frame, curr_frame, method='farneback'):
    """
    Compute optical flow between two consecutive frames using specified method.
    
    Args:
        prev_frame (np.array): Grayscale previous frame.
        curr_frame (np.array): Grayscale current frame.
        method (str): Optical flow method ('farneback' or 'lucas_kanade').
    
    Returns:
        flow (np.array): Computed optical flow vectors.
    """
    if method == 'farneback':
        # Farneback dense optical flow with default parameters
        flow = cv2.calcOpticalFlowFarneback(
            prev_frame, curr_frame, None,
            pyr_scale=0.5, levels=3, winsize=15,
            iterations=3, poly_n=5, poly_sigma=1.2,
            flags=cv2.OPTFLOW_FARNEBACK_GAUSSIAN
        )
    elif method == 'lucas_kanade':
        # Lucas-Kanade sparse optical flow with Shi-Tomasi corner detection
        feature_params = dict(maxCorners=100, qualityLevel=0.3, minDistance=7, blockSize=7)
        prev_pts = cv2.goodFeaturesToTrack(prev_frame, mask=None, **feature_params)
        curr_pts, status, _ = cv2.calcOpticalFlowPyrLK(
            prev_frame, curr_frame, prev_pts, None,
            winSize=(15, 15), maxLevel=2,
            criteria=(cv2.TERM_CRITERIA_EPS | cv2.TERM_CRITERIA_COUNT, 10, 0.03)
        )
        # Filter valid points and compute flow vectors
        valid_prev = prev_pts[status == 1]
        valid_curr = curr_pts[status == 1]
        flow = valid_curr - valid_prev
    else:
        raise ValueError("Unsupported optical flow method")
    
    return flow

def visualize_optical_flow(frame, flow, method='farneback'):
    """
    Visualize optical flow vectors on the frame.
    
    Args:
        frame (np.array): Input frame for visualization.
        flow (np.array): Optical flow vectors.
        method (str): Method used for flow computation.
    """
    if method == 'farneback':
        # Convert flow to polar coordinates for visualization
        mag, ang = cv2.cartToPolar(flow[..., 0], flow[..., 1])
        hsv = np.zeros((frame.shape[0], frame.shape[1], 3), dtype=np.uint8)
        hsv[..., 0] = ang * 180 / np.pi / 2  # Hue represents direction
        hsv[..., 1] = 255  # Maximum saturation
        hsv[..., 2] = cv2.normalize(mag, None, 0, 255, cv2.NORM_MINMAX)  # Value represents magnitude
        rgb = cv2.cvtColor(hsv, cv2.COLOR_HSV2BGR)
        cv2.imshow('Optical Flow', rgb)
    elif method == 'lucas_kanade':
        # Draw flow vectors as lines on the frame
        vis = cv2.cvtColor(frame, cv2.COLOR_GRAY2BGR)
        for i, (dx, dy) in enumerate(flow):
            x, y = prev_pts[i].ravel()
            cv2.line(vis, (int(x), int(y)), (int(x+dx), int(y+dy)), (0, 255, 0), 2)
            cv2.circle(vis, (int(x), int(y)), 5, (0, 0, 255), -1)
        cv2.imshow('Optical Flow', vis)
    cv2.waitKey(1)

# Example usage for robotics application
if __name__ == "__main__":
    cap = cv2.VideoCapture(0)  # Use robot's camera feed
    ret, prev_frame = cap.read()
    prev_gray = cv2.cvtColor(prev_frame, cv2.COLOR_BGR2GRAY)
    
    while True:
        ret, curr_frame = cap.read()
        if not ret:
            break
        curr_gray = cv2.cvtColor(curr_frame, cv2.COLOR_BGR2GRAY)
        
        # Compute and visualize optical flow
        flow = compute_optical_flow(prev_gray, curr_gray, method='farneback')
        visualize_optical_flow(curr_gray, flow, method='farneback')
        
        prev_gray = curr_gray.copy()
        if cv2.waitKey(30) & 0xFF == ord('q'):
            break
    
    cap.release()
    cv2.destroyAllWindows()