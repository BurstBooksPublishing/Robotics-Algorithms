import cv2
import numpy as np

def detect_features(image_path, method='SIFT'):
    """
    Detect keypoints and descriptors using SIFT, SURF, or ORB.
    
    Args:
        image_path (str): Path to the input image.
        method (str): Feature detection method ('SIFT', 'SURF', or 'ORB').
    
    Returns:
        keypoints: Detected keypoints.
        descriptors: Computed descriptors.
    """
    # Load the image in grayscale
    image = cv2.imread(image_path, cv2.IMREAD_GRAYSCALE)
    
    # Initialize the feature detector based on the selected method
    if method == 'SIFT':
        detector = cv2.SIFT_create()
    elif method == 'SURF':
        detector = cv2.xfeatures2d.SURF_create(400)  # Threshold for Hessian
    elif method == 'ORB':
        detector = cv2.ORB_create(nfeatures=1000)    # Number of features
    else:
        raise ValueError("Invalid method. Choose 'SIFT', 'SURF', or 'ORB'.")
    
    # Detect keypoints and compute descriptors
    keypoints, descriptors = detector.detectAndCompute(image, None)
    
    return keypoints, descriptors

def draw_keypoints(image_path, keypoints, output_path):
    """
    Draw detected keypoints on the image and save the result.
    
    Args:
        image_path (str): Path to the input image.
        keypoints: Detected keypoints.
        output_path (str): Path to save the output image.
    """
    image = cv2.imread(image_path)
    image_with_keypoints = cv2.drawKeypoints(
        image, keypoints, None, flags=cv2.DRAW_MATCHES_FLAGS_DRAW_RICH_KEYPOINTS
    )
    cv2.imwrite(output_path, image_with_keypoints)

# Example usage
if __name__ == "__main__":
    input_image = "robot_scene.jpg"
    output_image = "features_detected.jpg"
    
    # Detect features using SIFT (default)
    keypoints, descriptors = detect_features(input_image, method='SIFT')
    print(f"Detected {len(keypoints)} keypoints using SIFT.")
    
    # Draw and save keypoints
    draw_keypoints(input_image, keypoints, output_image)