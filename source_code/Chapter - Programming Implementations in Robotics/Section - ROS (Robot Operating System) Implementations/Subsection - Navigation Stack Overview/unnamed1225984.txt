#!/usr/bin/env python3
import rospy
from move_base_msgs.msg import MoveBaseAction, MoveBaseGoal
import actionlib
from geometry_msgs.msg import PoseStamped, PoseWithCovarianceStamped
from nav_msgs.msg import Odometry

class NavigationStackController:
    """
    Advanced ROS navigation stack controller for goal-based navigation.
    Interfaces with move_base, AMCL, and costmaps for autonomous navigation.
    """
    
    def __init__(self):
        rospy.init_node('navigation_stack_controller', anonymous=True)
        
        # Action client for move_base (handles path planning and execution)
        self.move_base_client = actionlib.SimpleActionClient('move_base', MoveBaseAction)
        rospy.loginfo("Waiting for move_base action server...")
        self.move_base_client.wait_for_server()
        
        # Subscribers for localization feedback
        self.amcl_pose_sub = rospy.Subscriber('/amcl_pose', PoseWithCovarianceStamped, self._amcl_callback)
        self.odom_sub = rospy.Subscriber('/odom', Odometry, self._odom_callback)
        
        # Current robot state
        self.current_pose = None
        self.current_covariance = None
        
    def _amcl_callback(self, msg):
        """Callback for AMCL pose updates with covariance"""
        self.current_pose = msg.pose.pose
        self.current_covariance = msg.pose.covariance
        
    def _odom_callback(self, msg):
        """Callback for odometry updates"""
        # Can be used for dead reckoning or velocity-based checks
        pass
        
    def send_navigation_goal(self, target_pose, frame_id='map'):
        """
        Sends a navigation goal to move_base with proper coordinate frame.
        
        Args:
            target_pose: geometry_msgs/Pose - Target position and orientation
            frame_id: str - Coordinate frame (default: 'map')
        """
        goal = MoveBaseGoal()
        goal.target_pose.header.frame_id = frame_id
        goal.target_pose.header.stamp = rospy.Time.now()
        goal.target_pose.pose = target_pose
        
        rospy.loginfo(f"Sending navigation goal to {frame_id} frame")
        self.move_base_client.send_goal(goal)
        
        # Optional: Add result waiting with timeout
        # wait = self.move_base_client.wait_for_result(rospy.Duration(60))
        
    def cancel_current_goal(self):
        """Cancels the current navigation goal"""
        self.move_base_client.cancel_goal()
        rospy.loginfo("Current navigation goal cancelled")

if __name__ == '__main__':
    try:
        nav_controller = NavigationStackController()
        
        # Example target pose (x, y, z, orientation)
        sample_goal = PoseStamped()
        sample_goal.pose.position.x = 5.0
        sample_goal.pose.position.y = 3.0
        sample_goal.pose.orientation.w = 1.0  # Facing forward
        
        nav_controller.send_navigation_goal(sample_goal.pose)
        
        rospy.spin()
        
    except rospy.ROSInterruptException:
        rospy.logerr("Navigation stack controller terminated")