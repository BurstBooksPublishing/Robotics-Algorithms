import numpy as np
import tensorflow as tf
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler

# Simulated dataset: human motion trajectories and robot responses
# Features: human position (x, y), velocity (vx, vy), interaction force (fx, fy)
# Labels: predicted robot response (dx, dy) for collaborative task
X = np.random.rand(1000, 6)  # Simulated human interaction data
y = np.random.rand(1000, 2)  # Simulated robot response targets

# Preprocess data
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2)

# Build predictive model using LSTM for temporal dependencies
model = tf.keras.Sequential([
    tf.keras.layers.LSTM(64, input_shape=(None, 6), return_sequences=True),
    tf.keras.layers.Dropout(0.2),
    tf.keras.layers.LSTM(32),
    tf.keras.layers.Dense(16, activation='relu'),
    tf.keras.layers.Dense(2)  # Output: predicted robot displacement
])

# Custom loss function for human-robot interaction
def interaction_loss(y_true, y_pred):
    # Weighted MSE with higher penalty for unsafe predictions
    safety_weight = tf.where(y_pred > 0.5, 10.0, 1.0)  # Example safety threshold
    return tf.reduce_mean(safety_weight * tf.square(y_true - y_pred))

model.compile(optimizer='adam', loss=interaction_loss, metrics=['mae'])

# Train with early stopping
callback = tf.keras.callbacks.EarlyStopping(monitor='val_loss', patience=5)
history = model.fit(
    X_train[:, np.newaxis, :], y_train,  # Add temporal dimension
    epochs=50,
    batch_size=32,
    validation_split=0.1,
    callbacks=[callback]
)

# Evaluate on test set
test_loss, test_mae = model.evaluate(X_test[:, np.newaxis, :], y_test)
print(f"Test MAE: {test_mae:.4f}")

# Predict robot response for new human interaction
new_interaction = scaler.transform(np.random.rand(1, 6))
predicted_response = model.predict(new_interaction[np.newaxis, :, :])
print(f"Predicted robot response: {predicted_response[0]}")