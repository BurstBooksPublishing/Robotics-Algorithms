/**
 * ForceFeedbackAlgorithm.java
 * Demonstrates a basic force feedback algorithm for haptic robotics.
 * Simulates spring-damper dynamics for human-robot interaction.
 */
public class ForceFeedbackAlgorithm {
    private double springConstant;  // Spring stiffness (N/m)
    private double dampingCoefficient;  // Damping factor (Ns/m)
    private double equilibriumPosition;  // Rest position (m)

    public ForceFeedbackAlgorithm(double k, double c, double x0) {
        this.springConstant = k;
        this.dampingCoefficient = c;
        this.equilibriumPosition = x0;
    }

    /**
     * Calculates force feedback based on position and velocity.
     * @param currentPosition Current robot end-effector position (m)
     * @param currentVelocity Current robot end-effector velocity (m/s)
     * @return Computed force (N)
     */
    public double computeFeedbackForce(double currentPosition, double currentVelocity) {
        // Spring force: F_spring = -k * (x - x0)
        double springForce = -springConstant * (currentPosition - equilibriumPosition);
        
        // Damping force: F_damp = -c * v
        double dampingForce = -dampingCoefficient * currentVelocity;
        
        // Total force feedback
        return springForce + dampingForce;
    }

    /**
     * Updates equilibrium position for adaptive force feedback.
     * @param newPosition New target position (m)
     */
    public void updateEquilibriumPosition(double newPosition) {
        this.equilibriumPosition = newPosition;
    }

    // Example usage
    public static void main(String[] args) {
        // Initialize with k=100 N/m, c=5 Ns/m, x0=0.5m
        ForceFeedbackAlgorithm ffa = new ForceFeedbackAlgorithm(100.0, 5.0, 0.5);
        
        // Simulate robot at position 0.6m moving at 0.1m/s
        double force = ffa.computeFeedbackForce(0.6, 0.1);
        System.out.println("Computed force feedback: " + force + " N");
    }
}